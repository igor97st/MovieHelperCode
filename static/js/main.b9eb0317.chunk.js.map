{"version":3,"sources":["components/MovieRow.js","App.js","registerServiceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","title","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTerm","_this2","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","components_MovieRow","push","setState","rows","error","xhr","status","err","event","target","className","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","searchChangeHandler","placeholder","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b9eb0317.chunk.js","sourcesContent":["import React from 'react'\n\nclass MovieRow extends React.Component {\n  viewMovie() {\n    // console.log(\"Trying to view movie\")\n    // console.log(this.props.movie.title)\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\n    window.location.href = url\n  }\n\n  render() {\n    return <table key={this.props.movie.id}>\n    <tbody>\n      <tr>\n        <td>\n          <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\n        </td>\n        <td>\n          <h3>{this.props.movie.title}</h3>\n          <p>{this.props.movie.overview}</p>\n          <input type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>\n          \n        </td>\n      </tr>\n    </tbody>\n  </table>\n  }\n}\n\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './components/MovieRow.js'\nimport $ from 'jquery'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n \n    \n\n    this.performSearch(\"\")\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"Perform search using moviedb\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=60a27eb65f7bfc6491658e507c3c57ec&language=en-US&query=\" + searchTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully\")\n        // console.log(searchResults)\n        const results = searchResults.results\n        // console.log(results[0])\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          // console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\")\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n        \n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"app icon\" width=\"50\" src=\"MH.jpg\"/>\n              </td>\n              <td width=\"8\"/>\n              <td>\n                <h1>Movie Helper</h1>\n              </td>\n              <td>\n                <button>Log in</button>\n              </td>\n              <td>\n                <button>Sign in</button>\n              </td>\n              <td>\n                <button>Watched List</button>\n              </td>\n              <td>\n                <button>Deep search</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input style={{\n          fontSize: 24,\n          display: 'block',\n          width: \"99%\",\n          paddingTop: 8,\n          paddingBottom: 8,\n          paddingLeft: 16\n        }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter search term\"/>\n\n        {this.state.rows}\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}